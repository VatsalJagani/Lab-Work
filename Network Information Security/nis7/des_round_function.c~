#include <stdio.h>
#include <stdlib.h>

int big[48];
int small[32];
static const int sbox[8][4][16] = {
 
   {
   {14,  4, 13,  1,  2, 15, 11,  8,  3, 10,  6, 12,  5,  9,  0,  7},
   { 0, 15,  7,  4, 14,  2, 13,  1, 10,  6, 12, 11,  9,  5,  3,  8},
   { 4,  1, 14,  8, 13,  6,  2, 11, 15, 12,  9,  7,  3, 10,  5,  0},
   {15, 12,  8,  2,  4,  9,  1,  7,  5, 11,  3, 14, 10,  0,  6, 13},
   },
 
   {
   {15,  1,  8, 14,  6, 11,  3,  4,  9,  7,  2, 13, 12,  0,  5, 10},
   { 3, 13,  4,  7, 15,  2,  8, 14, 12,  0,  1, 10,  6,  9, 11,  5},
   { 0, 14,  7, 11, 10,  4, 13,  1,  5,  8, 12,  6,  9,  3,  2, 15},
   {13,  8, 10,  1,  3, 15,  4,  2, 11,  6,  7, 12,  0,  5, 14,  9},
   },
 
   {
   {10,  0,  9, 14,  6,  3, 15,  5,  1, 13, 12,  7, 11,  4,  2,  8},
   {13,  7,  0,  9,  3,  4,  6, 10,  2,  8,  5, 14, 12, 11, 15,  1},
   {13,  6,  4,  9,  8, 15,  3,  0, 11,  1,  2, 12,  5, 10, 14,  7},
   { 1, 10, 13,  0,  6,  9,  8,  7,  4, 15, 14,  3, 11,  5,  2, 12},
   },
 
   {
   { 7, 13, 14,  3,  0,  6,  9, 10,  1,  2,  8,  5, 11, 12,  4, 15},
   {13,  8, 11,  5,  6, 15,  0,  3,  4,  7,  2, 12,  1, 10, 14,  9},
   {10,  6,  9,  0, 12, 11,  7, 13, 15,  1,  3, 14,  5,  2,  8,  4},
   { 3, 15,  0,  6, 10,  1, 13,  8,  9,  4,  5, 11, 12,  7,  2, 14},
   },
 
   {
   { 2, 12,  4,  1,  7, 10, 11,  6,  8,  5,  3, 15, 13,  0, 14,  9},
   {14, 11,  2, 12,  4,  7, 13,  1,  5,  0, 15, 10,  3,  9,  8,  6},
   { 4,  2,  1, 11, 10, 13,  7,  8, 15,  9, 12,  5,  6,  3,  0, 14},
   {11,  8, 12,  7,  1, 14,  2, 13,  6, 15,  0,  9, 10,  4,  5,  3},
   },
 
   {
   {12,  1, 10, 15,  9,  2,  6,  8,  0, 13,  3,  4, 14,  7,  5, 11},
   {10, 15,  4,  2,  7, 12,  9,  5,  6,  1, 13, 14,  0, 11,  3,  8},
   { 9, 14, 15,  5,  2,  8, 12,  3,  7,  0,  4, 10,  1, 13, 11,  6},
   { 4,  3,  2, 12,  9,  5, 15, 10, 11, 14,  1,  7,  6,  0,  8, 13},
   },
 
   {
   { 4, 11,  2, 14, 15,  0,  8, 13,  3, 12,  9,  7,  5, 10,  6,  1},
   {13,  0, 11,  7,  4,  9,  1, 10, 14,  3,  5, 12,  2, 15,  8,  6},
   { 1,  4, 11, 13, 12,  3,  7, 14, 10, 15,  6,  8,  0,  5,  9,  2},
   { 6, 11, 13,  8,  1,  4, 10,  7,  9,  5,  0, 15, 14,  2,  3, 12},
   },
 
   {
   {13,  2,  8,  4,  6, 15, 11,  1, 10,  9,  3, 14,  5,  0, 12,  7},
   { 1, 15, 13,  8, 10,  3,  7,  4, 12,  5,  6, 11,  0, 14,  9,  2},
   { 7, 11,  4,  1,  9, 12, 14,  2,  0,  6, 10, 13, 15,  3,  5,  8},
   { 2,  1, 14,  7,  4, 10,  8, 13, 15, 12,  9,  0,  3,  5,  6, 11},
   },
 
};


static const int perbox[32] = {
 
   16,  7, 20, 21, 29, 12, 28, 17,  1, 15, 23, 26,  5, 18, 31, 10,
    2,  8, 24, 14, 32, 27,  3,  9, 19, 13, 30,  6, 22, 11,  4, 25
 
};

void toBinary(int *a, int n);
int toDecimal(int,int,int,int);
void exp_box(int a[]);
void s_box(int a[]);
void permutation(int arr[]);
void fun(int input[],int key[]);

main(){
	int in[32]={0,0,0,0, 0,0,1,0, 0,1,0,0, 0,1,1,0, 1,0,1,0, 1,1,0,0, 1,1,1,0, 1,1,1,0};
	int key[48]={1,1,1,0,1,0,0,0,0,0,1,0,1,0,1,0,1,1,1,1,1,0,0,0,0,0,0,0,1,1,0,0,1,0,1,0,0,0,0,0,0,0,1,1,1,1,0,0};
	fun(in,key);
	int i;
	for(i=0;i<48;i++){
		printf("%d ",small[i]);
	}
}

void fun(int in[],int key[]){	/* input and output length is 32 bit, key of length 48 bit */
	exp_box(in);
	int i;
	for(i=0;i<48;i++){
		if((big[i]==0 && key[i]==0) || (big[i]==1 && key[i]==1))
			big[i]=0;
		else
			big[i]=1;
	}
	
	s_box(big);
	int arr[32];
	for(i=0;i<32;i++)
	{
		arr[i]=small[i];	
	}
	permutation(arr);
	
}

void permutation(int arr[]){
	int i=0;
	for(i=0;i<32;i++)
	{
		small[i]=arr[perbox[i]-1];	
	}
}

void exp_box(int r[]){
	int t[48]={32,1,2,3,4,5,4,6,7,8,9,8,10,11,12,13,12,14,15,16,17,16,18,19,20,21,20,22,23,24,25,24,26,27,29,28,30,31,32,1};
	int i;
	for(i=0;i<48;i++){
		big[i]=r[t[i]];
	}
}

void s_box(int arr[]){
	int i,j=0,k,*bin,temp;
	bin=(int *)malloc(10);
	for(i=0;i<8;i+=6){
		if(arr[6*i]==0 && arr[6*i+5]==0){
			int temp=toDecimal(arr[6*i+1],arr[6*i+2],arr[6*i+3],arr[6*i+4]);
			toBinary(bin,sbox[i][0][temp]);
			for(k=0;k<4;k++){
				small[j]=bin[k];
				j++;
			}
		}
		else if(arr[6*i]==0 && arr[6*i+5]==1){
			toBinary(bin,sbox[i][1][temp]);
			int temp=toDecimal(arr[6*i+1],arr[6*i+2],arr[6*i+3],arr[6*i+4]);
			for(k=0;k<4;k++){
				small[j]=bin[k];
				j++;
			}
		}
		else if(arr[6*i]==1 && arr[6*i+5]==0){
			int temp=toDecimal(arr[6*i+1],arr[6*i+2],arr[6*i+3],arr[6*i+4]);
			toBinary(bin,sbox[i][2][temp]);
			for(k=0;k<4;k++){
				small[j]=bin[k];
				j++;
			}
		}
		else if(arr[6*i]==1 && arr[6*i+5]==1){
			int temp=toDecimal(arr[6*i+1],arr[6*i+2],arr[6*i+3],arr[6*i+4]);
			toBinary(bin,sbox[i][3][temp]);
			for(k=0;k<4;k++){
				small[j]=bin[k];
				j++;
			}
		}
		
		
	}
}

int toDecimal(int a,int b, int c,int d){
	int temp=0;
	if(d==1){
		temp+=1;
	}
	if(c==1){
		temp+=2;
	}
	if(b==1){
		temp+=4;
	}
	if(a==1){
		temp+=8;
	}
	return temp;
}

void toBinary(int *binaryNumber,int n){
    int i=0;
    	while(n!=0 && i<4){
	     *(binaryNumber+i)= n % 2;
	     n = n / 2;
	     i++;
	}
	return n;
}
